package{	import away3d.cameras.Camera3D;	import away3d.cameras.lenses.PerspectiveLens;	import away3d.containers.View3D;	import away3d.lights.LightBase;	import away3d.lights.PointLight;	import away3d.materials.lightpickers.StaticLightPicker;	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.display.Stage;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.geom.Vector3D;	import flash.utils.getTimer;	public class Main3D extends Sprite	{		/** motion data */		private var motions:Array;				protected var _view:View3D;		protected var _camera:Camera3D;		protected var _light:LightBase;		protected var _lightPicker:StaticLightPicker;						public function Main3D()		{			super();						if (stage)			{				onAdd(null);			} else			{				this.addEventListener(Event.ADDED_TO_STAGE, onAdd);			}		}				private function onAdd(e:Event):void		{			this.removeEventListener(Event.ADDED_TO_STAGE, onAdd);			// add event listener for deinit			this.addEventListener(Event.REMOVED_FROM_STAGE, onRemove, false, 0, true);						// stage			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;						init3D();			initCamera();			initLights();						// prepare motion data			motions = [];			motions.push( new MotionMan3D(_view.scene, "A_test.bvh", _lightPicker));			motions.push( new MotionMan3D(_view.scene, "B_test.bvh", _lightPicker));			motions.push( new MotionMan3D(_view.scene, "C_test.bvh", _lightPicker));						this.addEventListener(Event.ENTER_FRAME, onEnterFrame);		}				private function onRemove(event:Event):void		{			this.removeEventListener(Event.REMOVED_FROM_STAGE, onRemove);			this.removeEventListener(Event.ENTER_FRAME, onEnterFrame);						// deinit 3D			if (_view != null)			{				this.removeChild(_view);				_view.dispose();			}		}				private function onEnterFrame(e:Event):void		{			var n_timer:Number = flash.utils.getTimer();						//update motions			for each ( var motion:MotionMan3D in motions ) {				motion.update(n_timer);			}						// render 3D			_view.render();		}				/**		 * Inits the 3D view, camera, and lights. And also the stage		 */		protected function init3D():void		{			// init view			_view = new View3D();			_view.backgroundColor = 0xFFFFFF;			this.addChild(_view);			this.setChildIndex(_view, 0);		}				/**		 * Inits lights and add to view		 * @param	addToViewImmediately		 */		protected function initLights():void		{			// init light			_light = new PointLight();			_light.y = 1000;			_light.z = -1000;			_light.lookAt(new Vector3D());						_lightPicker = new StaticLightPicker([ _light ]);					_view.scene.addChild(_light);		}				/**		 * Init sthe camera		 */		protected function initCamera():void		{			// init camera			_camera = _view.camera;			_camera.y = 200;			_camera.x = 100;						// TODO: play with the camera			//var newLens:PerspectiveLens = new PerspectiveLens(50);			//_camera.lens = newLens;		}			}}